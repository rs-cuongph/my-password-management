// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String // Hashed password for server authentication
  kdfSalt    String // Random salt for client-side key derivation
  need2fa    Boolean  @default(false)
  totpSecret String? // Encrypted TOTP secret (AES-GCM encrypted)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  vaults        UserVault[]
  recoveryCodes RecoveryCode[]
  sessions      Session[]

  @@map("users")
}

model UserVault {
  id             Int      @id @default(autoincrement())
  userId         Int
  kdfJson        String // KDF parameters (Argon2 settings)
  wrappedDek     String // Wrapped Data Encryption Key
  blobCiphertext String // Encrypted vault data
  version        Int      @default(1)
  lastUpdated    DateTime @default(now())
  createdAt      DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_vaults")
}

model RecoveryCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  codeHash  String // Hashed recovery code
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recovery_codes")
}

model Session {
  id         Int      @id @default(autoincrement())
  userId     Int
  tokenHash  String // Hashed session token
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

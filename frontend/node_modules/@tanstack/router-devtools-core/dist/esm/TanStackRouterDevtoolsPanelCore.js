import { render, createComponent } from "solid-js/web";
import { createSignal, lazy } from "solid-js";
import { ShadowDomTargetContext, DevtoolsOnCloseContext } from "./context.js";
class TanStackRouterDevtoolsPanelCore {
  #router;
  #routerState;
  #style;
  #className;
  #shadowDOMTarget;
  #isMounted = false;
  #setIsOpen;
  #dispose;
  #Component;
  constructor(config) {
    const {
      router,
      routerState,
      shadowDOMTarget,
      setIsOpen,
      style,
      className
    } = config;
    this.#router = createSignal(router);
    this.#routerState = createSignal(routerState);
    this.#style = createSignal(style);
    this.#className = createSignal(className);
    this.#shadowDOMTarget = shadowDOMTarget;
    this.#setIsOpen = setIsOpen;
  }
  mount(el) {
    if (this.#isMounted) {
      throw new Error("Devtools is already mounted");
    }
    const dispose = render(() => {
      const [router] = this.#router;
      const [routerState] = this.#routerState;
      const [style] = this.#style;
      const [className] = this.#className;
      const shadowDOMTarget = this.#shadowDOMTarget;
      const setIsOpen = this.#setIsOpen;
      let BaseTanStackRouterDevtoolsPanel;
      if (this.#Component) {
        BaseTanStackRouterDevtoolsPanel = this.#Component;
      } else {
        BaseTanStackRouterDevtoolsPanel = lazy(() => import("./BaseTanStackRouterDevtoolsPanel.js"));
        this.#Component = BaseTanStackRouterDevtoolsPanel;
      }
      return createComponent(ShadowDomTargetContext.Provider, {
        value: shadowDOMTarget,
        get children() {
          return createComponent(DevtoolsOnCloseContext.Provider, {
            value: {
              onCloseClick: () => {
              }
            },
            get children() {
              return createComponent(BaseTanStackRouterDevtoolsPanel, {
                router,
                routerState,
                shadowDOMTarget,
                setIsOpen,
                style,
                className
              });
            }
          });
        }
      });
    }, el);
    this.#isMounted = true;
    this.#dispose = dispose;
  }
  unmount() {
    if (!this.#isMounted) {
      throw new Error("Devtools is not mounted");
    }
    this.#dispose?.();
    this.#isMounted = false;
  }
  setRouter(router) {
    this.#router[1](router);
  }
  setRouterState(routerState) {
    this.#routerState[1](routerState);
  }
  setStyle(style) {
    this.#style[1](style);
  }
  setClassName(className) {
    this.#className[1](className);
  }
  setOptions(options) {
    if (options.shadowDOMTarget !== void 0) {
      this.#shadowDOMTarget = options.shadowDOMTarget;
    }
    if (options.router !== void 0) {
      this.setRouter(options.router);
    }
    if (options.routerState !== void 0) {
      this.setRouterState(options.routerState);
    }
    if (options.style !== void 0) {
      this.setStyle(options.style);
    }
    if (options.className !== void 0) {
      this.setClassName(options.className);
    }
  }
}
export {
  TanStackRouterDevtoolsPanelCore
};
//# sourceMappingURL=TanStackRouterDevtoolsPanelCore.js.map

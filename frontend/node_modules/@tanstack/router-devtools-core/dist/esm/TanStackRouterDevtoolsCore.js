import { render, createComponent } from "solid-js/web";
import { createSignal, lazy } from "solid-js";
import { ShadowDomTargetContext } from "./context.js";
class TanStackRouterDevtoolsCore {
  #router;
  #routerState;
  #position;
  #initialIsOpen;
  #shadowDOMTarget;
  #panelProps;
  #closeButtonProps;
  #toggleButtonProps;
  #containerElement;
  #isMounted = false;
  #Component;
  #dispose;
  constructor(config) {
    this.#router = createSignal(config.router);
    this.#routerState = createSignal(config.routerState);
    this.#position = config.position ?? "bottom-left";
    this.#initialIsOpen = config.initialIsOpen ?? false;
    this.#shadowDOMTarget = config.shadowDOMTarget;
    this.#panelProps = config.panelProps;
    this.#closeButtonProps = config.closeButtonProps;
    this.#toggleButtonProps = config.toggleButtonProps;
    this.#containerElement = config.containerElement;
  }
  mount(el) {
    if (this.#isMounted) {
      throw new Error("Devtools is already mounted");
    }
    const dispose = render(() => {
      const [router] = this.#router;
      const [routerState] = this.#routerState;
      const position = this.#position;
      const initialIsOpen = this.#initialIsOpen;
      const shadowDOMTarget = this.#shadowDOMTarget;
      const panelProps = this.#panelProps;
      const closeButtonProps = this.#closeButtonProps;
      const toggleButtonProps = this.#toggleButtonProps;
      const containerElement = this.#containerElement;
      let Devtools;
      if (this.#Component) {
        Devtools = this.#Component;
      } else {
        Devtools = lazy(() => import("./FloatingTanStackRouterDevtools.js"));
        this.#Component = Devtools;
      }
      return createComponent(ShadowDomTargetContext.Provider, {
        value: shadowDOMTarget,
        get children() {
          return createComponent(Devtools, {
            position,
            initialIsOpen,
            router,
            routerState,
            shadowDOMTarget,
            panelProps,
            closeButtonProps,
            toggleButtonProps,
            containerElement
          });
        }
      });
    }, el);
    this.#isMounted = true;
    this.#dispose = dispose;
  }
  unmount() {
    if (!this.#isMounted) {
      throw new Error("Devtools is not mounted");
    }
    this.#dispose?.();
    this.#isMounted = false;
  }
  setRouter(router) {
    this.#router[1](router);
  }
  setRouterState(routerState) {
    this.#routerState[1](routerState);
  }
  setOptions(options) {
    if (options.position !== void 0) {
      this.#position = options.position;
    }
    if (options.initialIsOpen !== void 0) {
      this.#initialIsOpen = options.initialIsOpen;
    }
    if (options.shadowDOMTarget !== void 0) {
      this.#shadowDOMTarget = options.shadowDOMTarget;
    }
    if (options.containerElement !== void 0) {
      this.#containerElement = options.containerElement;
    }
  }
}
export {
  TanStackRouterDevtoolsCore
};
//# sourceMappingURL=TanStackRouterDevtoolsCore.js.map

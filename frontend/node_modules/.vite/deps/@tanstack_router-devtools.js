import {
  useRouter,
  useRouterState
} from "./chunk-2FCTDQS4.js";
import {
  DevtoolsOnCloseContext,
  ShadowDomTargetContext,
  createComponent,
  createSignal,
  lazy,
  render
} from "./chunk-BD6WHQAC.js";
import "./chunk-EKPTBDOG.js";
import {
  require_jsx_runtime
} from "./chunk-XO4JX7VM.js";
import "./chunk-AUFLGUIX.js";
import {
  require_react
} from "./chunk-PSQR3SVX.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/@tanstack/react-router-devtools/dist/esm/TanStackRouterDevtools.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// node_modules/@tanstack/router-devtools-core/dist/esm/TanStackRouterDevtoolsCore.js
var TanStackRouterDevtoolsCore = class {
  #router;
  #routerState;
  #position;
  #initialIsOpen;
  #shadowDOMTarget;
  #panelProps;
  #closeButtonProps;
  #toggleButtonProps;
  #containerElement;
  #isMounted = false;
  #Component;
  #dispose;
  constructor(config) {
    this.#router = createSignal(config.router);
    this.#routerState = createSignal(config.routerState);
    this.#position = config.position ?? "bottom-left";
    this.#initialIsOpen = config.initialIsOpen ?? false;
    this.#shadowDOMTarget = config.shadowDOMTarget;
    this.#panelProps = config.panelProps;
    this.#closeButtonProps = config.closeButtonProps;
    this.#toggleButtonProps = config.toggleButtonProps;
    this.#containerElement = config.containerElement;
  }
  mount(el) {
    if (this.#isMounted) {
      throw new Error("Devtools is already mounted");
    }
    const dispose = render(() => {
      const [router] = this.#router;
      const [routerState] = this.#routerState;
      const position = this.#position;
      const initialIsOpen = this.#initialIsOpen;
      const shadowDOMTarget = this.#shadowDOMTarget;
      const panelProps = this.#panelProps;
      const closeButtonProps = this.#closeButtonProps;
      const toggleButtonProps = this.#toggleButtonProps;
      const containerElement = this.#containerElement;
      let Devtools;
      if (this.#Component) {
        Devtools = this.#Component;
      } else {
        Devtools = lazy(() => import("./FloatingTanStackRouterDevtools-BJCNRVTB.js"));
        this.#Component = Devtools;
      }
      return createComponent(ShadowDomTargetContext.Provider, {
        value: shadowDOMTarget,
        get children() {
          return createComponent(Devtools, {
            position,
            initialIsOpen,
            router,
            routerState,
            shadowDOMTarget,
            panelProps,
            closeButtonProps,
            toggleButtonProps,
            containerElement
          });
        }
      });
    }, el);
    this.#isMounted = true;
    this.#dispose = dispose;
  }
  unmount() {
    if (!this.#isMounted) {
      throw new Error("Devtools is not mounted");
    }
    this.#dispose?.();
    this.#isMounted = false;
  }
  setRouter(router) {
    this.#router[1](router);
  }
  setRouterState(routerState) {
    this.#routerState[1](routerState);
  }
  setOptions(options) {
    if (options.position !== void 0) {
      this.#position = options.position;
    }
    if (options.initialIsOpen !== void 0) {
      this.#initialIsOpen = options.initialIsOpen;
    }
    if (options.shadowDOMTarget !== void 0) {
      this.#shadowDOMTarget = options.shadowDOMTarget;
    }
    if (options.containerElement !== void 0) {
      this.#containerElement = options.containerElement;
    }
  }
};

// node_modules/@tanstack/router-devtools-core/dist/esm/TanStackRouterDevtoolsPanelCore.js
var TanStackRouterDevtoolsPanelCore = class {
  #router;
  #routerState;
  #style;
  #className;
  #shadowDOMTarget;
  #isMounted = false;
  #setIsOpen;
  #dispose;
  #Component;
  constructor(config) {
    const {
      router,
      routerState,
      shadowDOMTarget,
      setIsOpen,
      style,
      className
    } = config;
    this.#router = createSignal(router);
    this.#routerState = createSignal(routerState);
    this.#style = createSignal(style);
    this.#className = createSignal(className);
    this.#shadowDOMTarget = shadowDOMTarget;
    this.#setIsOpen = setIsOpen;
  }
  mount(el) {
    if (this.#isMounted) {
      throw new Error("Devtools is already mounted");
    }
    const dispose = render(() => {
      const [router] = this.#router;
      const [routerState] = this.#routerState;
      const [style] = this.#style;
      const [className] = this.#className;
      const shadowDOMTarget = this.#shadowDOMTarget;
      const setIsOpen = this.#setIsOpen;
      let BaseTanStackRouterDevtoolsPanel;
      if (this.#Component) {
        BaseTanStackRouterDevtoolsPanel = this.#Component;
      } else {
        BaseTanStackRouterDevtoolsPanel = lazy(() => import("./BaseTanStackRouterDevtoolsPanel-D5PD6FOB.js"));
        this.#Component = BaseTanStackRouterDevtoolsPanel;
      }
      return createComponent(ShadowDomTargetContext.Provider, {
        value: shadowDOMTarget,
        get children() {
          return createComponent(DevtoolsOnCloseContext.Provider, {
            value: {
              onCloseClick: () => {
              }
            },
            get children() {
              return createComponent(BaseTanStackRouterDevtoolsPanel, {
                router,
                routerState,
                shadowDOMTarget,
                setIsOpen,
                style,
                className
              });
            }
          });
        }
      });
    }, el);
    this.#isMounted = true;
    this.#dispose = dispose;
  }
  unmount() {
    if (!this.#isMounted) {
      throw new Error("Devtools is not mounted");
    }
    this.#dispose?.();
    this.#isMounted = false;
  }
  setRouter(router) {
    this.#router[1](router);
  }
  setRouterState(routerState) {
    this.#routerState[1](routerState);
  }
  setStyle(style) {
    this.#style[1](style);
  }
  setClassName(className) {
    this.#className[1](className);
  }
  setOptions(options) {
    if (options.shadowDOMTarget !== void 0) {
      this.#shadowDOMTarget = options.shadowDOMTarget;
    }
    if (options.router !== void 0) {
      this.setRouter(options.router);
    }
    if (options.routerState !== void 0) {
      this.setRouterState(options.routerState);
    }
    if (options.style !== void 0) {
      this.setStyle(options.style);
    }
    if (options.className !== void 0) {
      this.setClassName(options.className);
    }
  }
};

// node_modules/@tanstack/react-router-devtools/dist/esm/TanStackRouterDevtools.js
var import_react = __toESM(require_react(), 1);
function TanStackRouterDevtools(props) {
  const {
    initialIsOpen,
    panelProps,
    closeButtonProps,
    toggleButtonProps,
    position,
    containerElement,
    shadowDOMTarget,
    router: propsRouter
  } = props;
  const hookRouter = useRouter({ warn: false });
  const activeRouter = propsRouter ?? hookRouter;
  const activeRouterState = useRouterState({ router: activeRouter });
  const devToolRef = (0, import_react.useRef)(null);
  const [devtools] = (0, import_react.useState)(
    () => new TanStackRouterDevtoolsCore({
      initialIsOpen,
      panelProps,
      closeButtonProps,
      toggleButtonProps,
      position,
      containerElement,
      shadowDOMTarget,
      router: activeRouter,
      routerState: activeRouterState
    })
  );
  (0, import_react.useEffect)(() => {
    devtools.setRouter(activeRouter);
  }, [devtools, activeRouter]);
  (0, import_react.useEffect)(() => {
    devtools.setRouterState(activeRouterState);
  }, [devtools, activeRouterState]);
  (0, import_react.useEffect)(() => {
    devtools.setOptions({
      initialIsOpen,
      panelProps,
      closeButtonProps,
      toggleButtonProps,
      position,
      containerElement,
      shadowDOMTarget
    });
  }, [
    devtools,
    initialIsOpen,
    panelProps,
    closeButtonProps,
    toggleButtonProps,
    position,
    containerElement,
    shadowDOMTarget
  ]);
  (0, import_react.useEffect)(() => {
    if (devToolRef.current) {
      devtools.mount(devToolRef.current);
    }
    return () => {
      devtools.unmount();
    };
  }, [devtools]);
  return (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: (0, import_jsx_runtime.jsx)("div", { ref: devToolRef }) });
}

// node_modules/@tanstack/react-router-devtools/dist/esm/TanStackRouterDevtoolsPanel.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
var TanStackRouterDevtoolsPanel = (props) => {
  const { router: propsRouter, ...rest } = props;
  const hookRouter = useRouter({ warn: false });
  const activeRouter = propsRouter ?? hookRouter;
  const activeRouterState = useRouterState({ router: activeRouter });
  const devToolRef = (0, import_react2.useRef)(null);
  const [devtools] = (0, import_react2.useState)(
    () => new TanStackRouterDevtoolsPanelCore({
      ...rest,
      router: activeRouter,
      routerState: activeRouterState
    })
  );
  (0, import_react2.useEffect)(() => {
    devtools.setRouter(activeRouter);
  }, [devtools, activeRouter]);
  (0, import_react2.useEffect)(() => {
    devtools.setRouterState(activeRouterState);
  }, [devtools, activeRouterState]);
  (0, import_react2.useEffect)(() => {
    devtools.setOptions({
      className: props.className,
      style: props.style,
      shadowDOMTarget: props.shadowDOMTarget
    });
  }, [devtools, props.className, props.style, props.shadowDOMTarget]);
  (0, import_react2.useEffect)(() => {
    if (devToolRef.current) {
      devtools.mount(devToolRef.current);
    }
    return () => {
      devtools.unmount();
    };
  }, [devtools]);
  return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: (0, import_jsx_runtime2.jsx)("div", { ref: devToolRef }) });
};

// node_modules/@tanstack/react-router-devtools/dist/esm/index.js
var TanStackRouterDevtoolsInProd = TanStackRouterDevtools;
var TanStackRouterDevtoolsPanelInProd = TanStackRouterDevtoolsPanel;

// node_modules/@tanstack/router-devtools/dist/esm/index.js
console.warn(
  "[@tanstack/router-devtools] This package has moved to @tanstack/react-router-devtools. Please switch to the new package at your earliest convenience, as this package will be dropped in the next major version release."
);
export {
  TanStackRouterDevtoolsInProd as TanStackRouterDevtools,
  TanStackRouterDevtoolsPanelInProd as TanStackRouterDevtoolsPanel
};
//# sourceMappingURL=@tanstack_router-devtools.js.map

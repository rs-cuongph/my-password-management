{
  "version": 3,
  "sources": ["../../@tanstack/router-devtools-core/src/TanStackRouterDevtoolsCore.tsx", "../../@tanstack/router-devtools-core/src/TanStackRouterDevtoolsPanelCore.tsx", "../../@tanstack/react-router-devtools/src/TanStackRouterDevtools.tsx", "../../@tanstack/react-router-devtools/src/TanStackRouterDevtoolsPanel.tsx", "../../@tanstack/react-router-devtools/src/index.ts", "../../@tanstack/router-devtools/src/index.tsx"],
  "sourcesContent": ["import { createSignal, lazy } from 'solid-js'\nimport { render } from 'solid-js/web'\nimport { ShadowDomTargetContext } from './context'\nimport type { AnyRouter } from '@tanstack/router-core'\nimport type { Signal } from 'solid-js'\n\ninterface DevtoolsOptions {\n  /**\n   * Set this true if you want the dev tools to default to being open\n   */\n  initialIsOpen?: boolean\n  /**\n   * Use this to add props to the panel. For example, you can add class, style (merge and override default style), etc.\n   */\n  panelProps?: any & {\n    ref?: any\n  }\n  /**\n   * Use this to add props to the close button. For example, you can add class, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  closeButtonProps?: any & {\n    ref?: any\n  }\n  /**\n   * Use this to add props to the toggle button. For example, you can add class, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  toggleButtonProps?: any & {\n    ref?: any\n  }\n  /**\n   * The position of the TanStack Router logo to open and close the devtools panel.\n   * Defaults to 'bottom-left'.\n   */\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n  /**\n   * Use this to render the devtools inside a different type of container element for a11y purposes.\n   * Any string which corresponds to a valid intrinsic JSX element is allowed.\n   * Defaults to 'footer'.\n   */\n  containerElement?: string | any\n  /**\n   * A boolean variable indicating if the \"lite\" version of the library is being used\n   */\n  router: AnyRouter\n  routerState: any\n  /**\n   * Use this to attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n}\n\nclass TanStackRouterDevtoolsCore {\n  #router: Signal<AnyRouter>\n  #routerState: Signal<any>\n  #position: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n  #initialIsOpen: boolean\n  #shadowDOMTarget?: ShadowRoot\n\n  #panelProps: any\n  #closeButtonProps: any\n  #toggleButtonProps: any\n  #containerElement?: string | any\n\n  #isMounted = false\n  #Component: any\n  #dispose?: () => void\n\n  constructor(config: DevtoolsOptions) {\n    this.#router = createSignal(config.router)\n    this.#routerState = createSignal(config.routerState)\n    this.#position = config.position ?? 'bottom-left'\n    this.#initialIsOpen = config.initialIsOpen ?? false\n    this.#shadowDOMTarget = config.shadowDOMTarget\n\n    this.#panelProps = config.panelProps\n    this.#closeButtonProps = config.closeButtonProps\n    this.#toggleButtonProps = config.toggleButtonProps\n    this.#containerElement = config.containerElement\n  }\n\n  mount<T extends HTMLElement>(el: T) {\n    if (this.#isMounted) {\n      throw new Error('Devtools is already mounted')\n    }\n\n    const dispose = render(() => {\n      const [router] = this.#router\n      const [routerState] = this.#routerState\n      const position = this.#position\n      const initialIsOpen = this.#initialIsOpen\n      const shadowDOMTarget = this.#shadowDOMTarget\n\n      const panelProps = this.#panelProps\n      const closeButtonProps = this.#closeButtonProps\n      const toggleButtonProps = this.#toggleButtonProps\n      const containerElement = this.#containerElement\n\n      let Devtools\n\n      if (this.#Component) {\n        Devtools = this.#Component\n      } else {\n        Devtools = lazy(() => import('./FloatingTanStackRouterDevtools'))\n        this.#Component = Devtools\n      }\n\n      return (\n        <ShadowDomTargetContext.Provider value={shadowDOMTarget}>\n          <Devtools\n            position={position}\n            initialIsOpen={initialIsOpen}\n            router={router}\n            routerState={routerState}\n            shadowDOMTarget={shadowDOMTarget}\n            panelProps={panelProps}\n            closeButtonProps={closeButtonProps}\n            toggleButtonProps={toggleButtonProps}\n            containerElement={containerElement}\n          />\n        </ShadowDomTargetContext.Provider>\n      )\n    }, el)\n\n    this.#isMounted = true\n    this.#dispose = dispose\n  }\n\n  unmount() {\n    if (!this.#isMounted) {\n      throw new Error('Devtools is not mounted')\n    }\n    this.#dispose?.()\n    this.#isMounted = false\n  }\n\n  setRouter(router: AnyRouter) {\n    this.#router[1](router)\n  }\n\n  setRouterState(routerState: any) {\n    this.#routerState[1](routerState)\n  }\n\n  setOptions(options: Partial<DevtoolsOptions>) {\n    if (options.position !== undefined) {\n      this.#position = options.position\n    }\n\n    if (options.initialIsOpen !== undefined) {\n      this.#initialIsOpen = options.initialIsOpen\n    }\n\n    if (options.shadowDOMTarget !== undefined) {\n      this.#shadowDOMTarget = options.shadowDOMTarget\n    }\n\n    if (options.containerElement !== undefined) {\n      this.#containerElement = options.containerElement\n    }\n  }\n}\n\nexport { TanStackRouterDevtoolsCore }\n", "import { render } from 'solid-js/web'\nimport { createSignal, lazy } from 'solid-js'\nimport { DevtoolsOnCloseContext, ShadowDomTargetContext } from './context'\nimport type { JSX } from 'solid-js'\nimport type { AnyRouter } from '@tanstack/router-core'\n\ninterface TanStackRouterDevtoolsPanelCoreOptions {\n  /**\n   * The standard React style object used to style a component with inline styles\n   */\n  style?: JSX.CSSProperties\n  /**\n   * The standard React class property used to style a component with classes\n   */\n  className?: string\n  /**\n   * A boolean variable indicating whether the panel is open or closed\n   */\n  isOpen?: boolean\n  /**\n   * A function that toggles the open and close state of the panel\n   */\n  setIsOpen?: (isOpen: boolean) => void\n  /**\n   * Handles the opening and closing the devtools panel\n   */\n  handleDragStart?: (e: any) => void\n  /**\n   * A boolean variable indicating if the \"lite\" version of the library is being used\n   */\n  router: AnyRouter\n\n  routerState: any\n  /**\n   * Use this to attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n}\n\nclass TanStackRouterDevtoolsPanelCore {\n  #router: any\n  #routerState: any\n  #style: any\n  #className: any\n  #shadowDOMTarget?: ShadowRoot\n  #isMounted = false\n  #setIsOpen?: (isOpen: boolean) => void\n  #dispose?: () => void\n  #Component: any\n\n  constructor(config: TanStackRouterDevtoolsPanelCoreOptions) {\n    const {\n      router,\n      routerState,\n      shadowDOMTarget,\n      setIsOpen,\n      style,\n      className,\n    } = config\n\n    this.#router = createSignal(router)\n    this.#routerState = createSignal(routerState)\n    this.#style = createSignal(style)\n    this.#className = createSignal(className)\n    this.#shadowDOMTarget = shadowDOMTarget\n    this.#setIsOpen = setIsOpen\n  }\n\n  mount<T extends HTMLElement>(el: T) {\n    if (this.#isMounted) {\n      throw new Error('Devtools is already mounted')\n    }\n\n    const dispose = render(() => {\n      const [router] = this.#router\n      const [routerState] = this.#routerState\n      const [style] = this.#style\n      const [className] = this.#className\n      const shadowDOMTarget = this.#shadowDOMTarget\n      const setIsOpen = this.#setIsOpen\n\n      let BaseTanStackRouterDevtoolsPanel\n\n      if (this.#Component) {\n        BaseTanStackRouterDevtoolsPanel = this.#Component\n      } else {\n        BaseTanStackRouterDevtoolsPanel = lazy(\n          () => import('./BaseTanStackRouterDevtoolsPanel'),\n        )\n        this.#Component = BaseTanStackRouterDevtoolsPanel\n      }\n\n      return (\n        <ShadowDomTargetContext.Provider value={shadowDOMTarget}>\n          <DevtoolsOnCloseContext.Provider\n            value={{\n              onCloseClick: () => {},\n            }}\n          >\n            <BaseTanStackRouterDevtoolsPanel\n              router={router}\n              routerState={routerState}\n              shadowDOMTarget={shadowDOMTarget}\n              setIsOpen={setIsOpen}\n              style={style}\n              className={className}\n            />\n          </DevtoolsOnCloseContext.Provider>\n        </ShadowDomTargetContext.Provider>\n      )\n    }, el)\n\n    this.#isMounted = true\n    this.#dispose = dispose\n  }\n\n  unmount() {\n    if (!this.#isMounted) {\n      throw new Error('Devtools is not mounted')\n    }\n    this.#dispose?.()\n    this.#isMounted = false\n  }\n\n  setRouter(router: AnyRouter) {\n    this.#router[1](router)\n  }\n\n  setRouterState(routerState: any) {\n    this.#routerState[1](routerState)\n  }\n\n  setStyle(style: any) {\n    this.#style[1](style)\n  }\n\n  setClassName(className: any) {\n    this.#className[1](className)\n  }\n\n  setOptions(options: Partial<TanStackRouterDevtoolsPanelCoreOptions>) {\n    if (options.shadowDOMTarget !== undefined) {\n      this.#shadowDOMTarget = options.shadowDOMTarget\n    }\n    if (options.router !== undefined) {\n      this.setRouter(options.router)\n    }\n    if (options.routerState !== undefined) {\n      this.setRouterState(options.routerState)\n    }\n\n    if (options.style !== undefined) {\n      this.setStyle(options.style)\n    }\n\n    if (options.className !== undefined) {\n      this.setClassName(options.className)\n    }\n  }\n}\n\nexport { TanStackRouterDevtoolsPanelCore }\n", "import { TanStackRouterDevtoolsCore } from '@tanstack/router-devtools-core'\nimport { Fragment, useEffect, useRef, useState } from 'react'\nimport { useRouter, useRouterState } from '@tanstack/react-router'\nimport type { ButtonHTMLAttributes, HTMLAttributes } from 'react'\nimport type { AnyRouter } from '@tanstack/react-router'\nimport type React from 'react'\n\ninterface DevtoolsOptions {\n  /**\n   * Set this true if you want the dev tools to default to being open\n   */\n  initialIsOpen?: boolean\n  /**\n   * Use this to add props to the panel. For example, you can add className, style (merge and override default style), etc.\n   */\n  panelProps?: HTMLAttributes<HTMLDivElement>\n  /**\n   * Use this to add props to the close button. For example, you can add className, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  closeButtonProps?: ButtonHTMLAttributes<HTMLButtonElement>\n  /**\n   * Use this to add props to the toggle button. For example, you can add className, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  toggleButtonProps?: ButtonHTMLAttributes<HTMLButtonElement>\n  /**\n   * The position of the TanStack Router logo to open and close the devtools panel.\n   * Defaults to 'bottom-left'.\n   */\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n  /**\n   * Use this to render the devtools inside a different type of container element for a11y purposes.\n   * Any string which corresponds to a valid intrinsic JSX element is allowed.\n   * Defaults to 'footer'.\n   */\n  containerElement?: string | any\n  /**\n   * The router instance to use for the devtools.\n   */\n  router?: AnyRouter\n  /**\n   * Use this to attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n}\n\nexport function TanStackRouterDevtools(\n  props: DevtoolsOptions,\n): React.ReactElement | null {\n  const {\n    initialIsOpen,\n    panelProps,\n    closeButtonProps,\n    toggleButtonProps,\n    position,\n    containerElement,\n    shadowDOMTarget,\n    router: propsRouter,\n  } = props\n\n  const hookRouter = useRouter({ warn: false })\n  const activeRouter = propsRouter ?? hookRouter\n\n  const activeRouterState = useRouterState({ router: activeRouter })\n\n  const devToolRef = useRef<HTMLDivElement>(null)\n  const [devtools] = useState(\n    () =>\n      new TanStackRouterDevtoolsCore({\n        initialIsOpen,\n        panelProps,\n        closeButtonProps,\n        toggleButtonProps,\n        position,\n        containerElement,\n        shadowDOMTarget,\n        router: activeRouter,\n        routerState: activeRouterState,\n      }),\n  )\n\n  // Update devtools when props change\n  useEffect(() => {\n    devtools.setRouter(activeRouter)\n  }, [devtools, activeRouter])\n\n  useEffect(() => {\n    devtools.setRouterState(activeRouterState)\n  }, [devtools, activeRouterState])\n\n  useEffect(() => {\n    devtools.setOptions({\n      initialIsOpen: initialIsOpen,\n      panelProps: panelProps,\n      closeButtonProps: closeButtonProps,\n      toggleButtonProps: toggleButtonProps,\n      position: position,\n      containerElement: containerElement,\n      shadowDOMTarget: shadowDOMTarget,\n    })\n  }, [\n    devtools,\n    initialIsOpen,\n    panelProps,\n    closeButtonProps,\n    toggleButtonProps,\n    position,\n    containerElement,\n    shadowDOMTarget,\n  ])\n\n  useEffect(() => {\n    if (devToolRef.current) {\n      devtools.mount(devToolRef.current)\n    }\n\n    return () => {\n      devtools.unmount()\n    }\n  }, [devtools])\n\n  return (\n    <Fragment>\n      <div ref={devToolRef} />\n    </Fragment>\n  )\n}\n", "import { useRouter, useRouterState } from '@tanstack/react-router'\nimport { TanStackRouterDevtoolsPanelCore } from '@tanstack/router-devtools-core'\nimport React, { useEffect, useRef, useState } from 'react'\nimport type { AnyRouter } from '@tanstack/react-router'\n\nexport interface DevtoolsPanelOptions {\n  /**\n   * The standard React style object used to style a component with inline styles\n   */\n  style?: any\n  /**\n   * The standard React class property used to style a component with classes\n   */\n  className?: string\n  /**\n   * A boolean variable indicating whether the panel is open or closed\n   */\n  isOpen?: boolean\n  /**\n   * A function that toggles the open and close state of the panel\n   */\n  setIsOpen?: (isOpen: boolean) => void\n  /**\n   * Handles the opening and closing the devtools panel\n   */\n  handleDragStart?: (e: any) => void\n  /**\n   * A boolean variable indicating if the \"lite\" version of the library is being used\n   */\n  router?: AnyRouter\n  /**\n   * Use this to attach the devtool's styles to specific element in the DOM.\n   */\n  shadowDOMTarget?: ShadowRoot\n}\n\nexport const TanStackRouterDevtoolsPanel: React.FC<DevtoolsPanelOptions> = (\n  props,\n): React.ReactElement | null => {\n  const { router: propsRouter, ...rest } = props\n  const hookRouter = useRouter({ warn: false })\n  const activeRouter = propsRouter ?? hookRouter\n  const activeRouterState = useRouterState({ router: activeRouter })\n\n  const devToolRef = useRef<HTMLDivElement>(null)\n  const [devtools] = useState(\n    () =>\n      new TanStackRouterDevtoolsPanelCore({\n        ...rest,\n        router: activeRouter,\n        routerState: activeRouterState,\n      }),\n  )\n\n  // Update devtools when props change\n  useEffect(() => {\n    devtools.setRouter(activeRouter)\n  }, [devtools, activeRouter])\n\n  useEffect(() => {\n    devtools.setRouterState(activeRouterState)\n  }, [devtools, activeRouterState])\n\n  useEffect(() => {\n    devtools.setOptions({\n      className: props.className,\n      style: props.style,\n      shadowDOMTarget: props.shadowDOMTarget,\n    })\n  }, [devtools, props.className, props.style, props.shadowDOMTarget])\n\n  useEffect(() => {\n    if (devToolRef.current) {\n      devtools.mount(devToolRef.current)\n    }\n\n    return () => {\n      devtools.unmount()\n    }\n  }, [devtools])\n\n  return (\n    <>\n      <div ref={devToolRef} />\n    </>\n  )\n}\n", "import * as Devtools from './TanStackRouterDevtools'\nimport * as DevtoolsPanel from './TanStackRouterDevtoolsPanel'\n\nexport const TanStackRouterDevtools: (typeof Devtools)['TanStackRouterDevtools'] =\n  process.env.NODE_ENV !== 'development'\n    ? function () {\n        return null\n      }\n    : Devtools.TanStackRouterDevtools\n\nexport const TanStackRouterDevtoolsInProd: (typeof Devtools)['TanStackRouterDevtools'] =\n  Devtools.TanStackRouterDevtools\n\nexport const TanStackRouterDevtoolsPanel: (typeof DevtoolsPanel)['TanStackRouterDevtoolsPanel'] =\n  process.env.NODE_ENV !== 'development'\n    ? function () {\n        return null\n      }\n    : DevtoolsPanel.TanStackRouterDevtoolsPanel\n\nexport const TanStackRouterDevtoolsPanelInProd: (typeof DevtoolsPanel)['TanStackRouterDevtoolsPanel'] =\n  DevtoolsPanel.TanStackRouterDevtoolsPanel\n", "console.warn(\n  '[@tanstack/router-devtools] This package has moved to @tanstack/react-router-devtools. Please switch to the new package at your earliest convenience, as this package will be dropped in the next major version release.',\n)\n\nexport { TanStackRouterDevtoolsInProd as TanStackRouterDevtools } from '@tanstack/react-router-devtools'\nexport { TanStackRouterDevtoolsPanelInProd as TanStackRouterDevtoolsPanel } from '@tanstack/react-router-devtools'\n"],
  "mappings": "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",
  "names": ["TanStackRouterDevtoolsCore", "constructor", "config", "createSignal", "router", "routerState", "position", "initialIsOpen", "shadowDOMTarget", "panelProps", "closeButtonProps", "toggleButtonProps", "containerElement", "mount", "el", "Error", "dispose", "render", "Devtools", "lazy", "_$createComponent", "ShadowDomTargetContext", "Provider", "value", "children", "unmount", "setRouter", "setRouterState", "setOptions", "options", "undefined", "TanStackRouterDevtoolsPanelCore", "constructor", "config", "router", "routerState", "shadowDOMTarget", "setIsOpen", "style", "className", "createSignal", "mount", "el", "Error", "dispose", "render", "BaseTanStackRouterDevtoolsPanel", "lazy", "_$createComponent", "ShadowDomTargetContext", "Provider", "value", "children", "DevtoolsOnCloseContext", "onCloseClick", "unmount", "setRouter", "setRouterState", "setStyle", "setClassName", "setOptions", "options", "undefined", "Devtools.TanStackRouterDevtools", "DevtoolsPanel.TanStackRouterDevtoolsPanel"]
}

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VaultRouteImport } from './routes/vault'
import { Route as TotpVerificationRouteImport } from './routes/totp-verification'
import { Route as TotpSetupRouteImport } from './routes/totp-setup'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as MasterPasswordRouteImport } from './routes/master-password'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'

const VaultRoute = VaultRouteImport.update({
  id: '/vault',
  path: '/vault',
  getParentRoute: () => rootRouteImport,
} as any)
const TotpVerificationRoute = TotpVerificationRouteImport.update({
  id: '/totp-verification',
  path: '/totp-verification',
  getParentRoute: () => rootRouteImport,
} as any)
const TotpSetupRoute = TotpSetupRouteImport.update({
  id: '/totp-setup',
  path: '/totp-setup',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const MasterPasswordRoute = MasterPasswordRouteImport.update({
  id: '/master-password',
  path: '/master-password',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/master-password': typeof MasterPasswordRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/totp-setup': typeof TotpSetupRoute
  '/totp-verification': typeof TotpVerificationRoute
  '/vault': typeof VaultRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/master-password': typeof MasterPasswordRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/totp-setup': typeof TotpSetupRoute
  '/totp-verification': typeof TotpVerificationRoute
  '/vault': typeof VaultRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/master-password': typeof MasterPasswordRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/totp-setup': typeof TotpSetupRoute
  '/totp-verification': typeof TotpVerificationRoute
  '/vault': typeof VaultRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/master-password'
    | '/register'
    | '/settings'
    | '/totp-setup'
    | '/totp-verification'
    | '/vault'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/master-password'
    | '/register'
    | '/settings'
    | '/totp-setup'
    | '/totp-verification'
    | '/vault'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/master-password'
    | '/register'
    | '/settings'
    | '/totp-setup'
    | '/totp-verification'
    | '/vault'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  MasterPasswordRoute: typeof MasterPasswordRoute
  RegisterRoute: typeof RegisterRoute
  SettingsRoute: typeof SettingsRoute
  TotpSetupRoute: typeof TotpSetupRoute
  TotpVerificationRoute: typeof TotpVerificationRoute
  VaultRoute: typeof VaultRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vault': {
      id: '/vault'
      path: '/vault'
      fullPath: '/vault'
      preLoaderRoute: typeof VaultRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/totp-verification': {
      id: '/totp-verification'
      path: '/totp-verification'
      fullPath: '/totp-verification'
      preLoaderRoute: typeof TotpVerificationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/totp-setup': {
      id: '/totp-setup'
      path: '/totp-setup'
      fullPath: '/totp-setup'
      preLoaderRoute: typeof TotpSetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/master-password': {
      id: '/master-password'
      path: '/master-password'
      fullPath: '/master-password'
      preLoaderRoute: typeof MasterPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  MasterPasswordRoute: MasterPasswordRoute,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRoute,
  TotpSetupRoute: TotpSetupRoute,
  TotpVerificationRoute: TotpVerificationRoute,
  VaultRoute: VaultRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
